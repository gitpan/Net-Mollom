.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Mollom 3"
.TH Net::Mollom 3 "2009-03-01" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Net::Mollom \- interface with Mollom web API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Communicate with the Mollom web \s-1API\s0 (<http://mollom.com/>) via
XML-RPC to determine whether user input is Spam, Ham, flame or
obscene.
.PP
.Vb 4
\&    my $mollom = Net::Mollom->new(
\&        public_key => 'a2476604ffba00c907478c8f40b83b03',
\&        private_key => '42d5448f124966e27db079c8fa92de0f',
\&    );
.Ve
.PP
.Vb 1
\&    my @server_list = $mollom->server_list();
.Ve
.PP
.Vb 12
\&    my $check = $mollom->check_content(
\&        post_title => $title,
\&        post_body  => $text,
\&    );
\&    if( $check->is_spam ) {
\&        warn "someone's trying to sell us v1@grA!"
\&    } elsif( $check->is_unsure ) {
\&        # show them a CAPTCHA to see if they are really human
\&        my $captcha_url = $mollom->get_image_captcha();
\&    } elsif( $check->quality < .5 ) {
\&        warn "someone's trying to flame us!"
\&    }
.Ve
.PP
If you have any questions about how any of the methods work, please
consult the Mollom \s-1API\s0 documentation \- <http://mollom.com/api>.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.Sh "new"
.IX Subsection "new"
This creates a new NET::Mollom object for communication. It takes the following
named arguments:
.IP "* public_key (required)" 4
.IX Item "public_key (required)"
This is your Mollom \s-1API\s0 public key.
.IP "* private_key (required)" 4
.IX Item "private_key (required)"
This is your Mollom \s-1API\s0 private key.
.SH "METHODS"
.IX Header "METHODS"
.Sh "verify_key"
.IX Subsection "verify_key"
Check to make sure that Mollom recognizes your public and private keys.
Returns true if successful, false otherwise. This is not necessary to use
in your application, but can be used when doing initial development or testing.
.PP
.Vb 5
\&    if( $mollom->verify_key ) {
\&        # go a head and do stuff
\&    } else {
\&        # doh! you screwed up somewhere
\&    }
.Ve
.Sh "check_content"
.IX Subsection "check_content"
Check some content for spamminess and quality. Takes the following
optional named arguments:
.IP "* post_title" 4
.IX Item "post_title"
.PD 0
.IP "* post_body" 4
.IX Item "post_body"
.IP "* author_name" 4
.IX Item "author_name"
.IP "* author_url" 4
.IX Item "author_url"
.IP "* author_mail" 4
.IX Item "author_mail"
.IP "* author_openid" 4
.IX Item "author_openid"
.IP "* author_ip" 4
.IX Item "author_ip"
.IP "* author_id" 4
.IX Item "author_id"
.PD
.PP
Returns a Net::Mollom::ContentCheck object.
.PP
.Vb 7
\&    my $check = $mollom->check_content(
\&        post_title => $title,
\&        post_body => $body,
\&        author_name => 'Michael Peters',
\&        author_mail => 'mpeters@p3.com',
\&        author_id => 12345,
\&    );
.Ve
.Sh "send_feedback"
.IX Subsection "send_feedback"
Send feedback to Mollom about their rating of your content. Take sthe following
optional named parameters:
.IP "* feedback" 4
.IX Item "feedback"
A string value of either \f(CW\*(C`spam\*(C'\fR, \f(CW\*(C`profanity\*(C'\fR, \f(CW\*(C`low\-quality\*(C'\fR, or \f(CW\*(C`unwanted\*(C'\fR.
.IP "* session_id" 4
.IX Item "session_id"
The id of the session where the content was checed (by a call to \f(CW\*(C`check_content\*(C'\fR).
.PP
.Vb 1
\&    $mollom->send_feedback
.Ve
.Sh "get_image_captcha"
.IX Subsection "get_image_captcha"
Returns the \s-1URL\s0 of an image \s-1CAPTCHA\s0. This should only be called if the last
message checked was marked \f(CW\*(C`is_unsure\*(C'\fR. Not for \f(CW\*(C`is_spam\*(C'\fR or \f(CW\*(C`is_ham\*(C'\fR.
It takes the following optional parameters:
.IP "* author_ip" 4
.IX Item "author_ip"
The \s-1IP\s0 address of the content author
.IP "* session_id" 4
.IX Item "session_id"
The Mollom session_id. Normally you don't need to worry about this since Net::Mollom
will take care of it for you.
.Sh "get_audio_captcha"
.IX Subsection "get_audio_captcha"
Returns the \s-1URL\s0 of an audio \s-1CAPTCHA\s0 (mp3 file). This should only be called if the last
message checked was marked \f(CW\*(C`is_unsure\*(C'\fR. Not for \f(CW\*(C`is_spam\*(C'\fR or \f(CW\*(C`is_ham\*(C'\fR.
It takes the following optional parameters:
.IP "* author_ip" 4
.IX Item "author_ip"
The \s-1IP\s0 address of the content author
.IP "* session_id" 4
.IX Item "session_id"
The Mollom session_id. Normally you don't need to worry about this since Net::Mollom
will take care of it for you.
.Sh "server_list"
.IX Subsection "server_list"
This method will ask Mollom what servers to use. The list of servers
is saved in the Net::Mollom package and reused on subsequent calls
to the \s-1API\s0. Normally you won't need to call this method on it's own
since it will be called for you when you use another part of the \s-1API\s0.
.PP
.Vb 1
\&    my @servers = $mollom->server_list();
.Ve
.PP
.Vb 2
\&    # or if you've saved the list in a more permanent data store
\&    $mollom->server_list(@servers);
.Ve
.Sh "get_statistics"
.IX Subsection "get_statistics"
This method gets your Mollom usage statistics. It takes the following required named
parameters:
.IP "* type" 4
.IX Item "type"
Must be one of \f(CW\*(C`total_days\*(C'\fR, \f(CW\*(C`total_accepted\*(C'\fR, \f(CW\*(C`total_rejected\*(C'\fR, \f(CW\*(C`yesterday_accepted\*(C'\fR,
\&\f(CW\*(C`yesterday_rejected\*(C'\fR, \f(CW\*(C`today_accepted\*(C'\fR, \f(CW\*(C`today_rejected\*(C'\fR.
.PP
Will return the count for the specific statistic type you requested.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Peters, \f(CW\*(C`<mpeters at plusthree.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
Please report any bugs or feature requests to
\&\f(CW\*(C`bug\-net\-mollom at rt.cpan.org\*(C'\fR, or through the web interface at
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Net\-Mollom>.  I will
be notified, and then you'll automatically be notified of progress on
your bug as I make changes.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Net::Mollom
.Ve
.PP
You can also look for information at:
.IP "* \s-1RT:\s0 \s-1CPAN\s0's request tracker" 4
.IX Item "RT: CPAN's request tracker"
<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Net\-Mollom>
.IP "* AnnoCPAN: Annotated \s-1CPAN\s0 documentation" 4
.IX Item "AnnoCPAN: Annotated CPAN documentation"
<http://annocpan.org/dist/Net\-Mollom>
.IP "* \s-1CPAN\s0 Ratings" 4
.IX Item "CPAN Ratings"
<http://cpanratings.perl.org/d/Net\-Mollom>
.IP "* Search \s-1CPAN\s0" 4
.IX Item "Search CPAN"
<http://search.cpan.org/dist/Net\-Mollom/>
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2009 Michael Peters, all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
